# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TAC5ZBv5T2pE4xO1TdJY2K2m6EN8BJ2I
"""

!pip install -U -q PyDrive
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials

auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

downloaded = drive.CreateFile({'id':'1P4DXhuQY4xWr0AFejK_zqpEF8JtMqhta'}) 
downloaded.GetContentFile('headbrain.csv')

import pandas as pd
import seaborn as sns
import sklearn
import matplotlib.pyplot as plt
plt.rcParams['figure.figsize']=(18.0,5.0)
data=pd.read_csv('/content/train.csv');
print(data.shape)
data.head()

data.isnull().sum()

sns.countplot(x="Survived",data=data)

sns.countplot(x='Survived',hue='Sex',data=data)

sns.countplot(x='Survived',hue='Pclass',data=data)

data["Age"].plot.hist()

data["Fare"].plot.hist(bins=20,figsize=(10,5))

sns.heatmap(data.isnull() , yticklabels=False,cmap="viridis")

sns.boxplot(x='Pclass',y='Age',data=data)

data.head(5)

data.drop('Cabin',axis=1,inplace=True)

data.head(5)

data.isnull().sum()

data.dropna(inplace=True)

sex=pd.get_dummies(data['Sex'],drop_first=True)
sex.head(5)

embark=pd.get_dummies(data['Embarked'],drop_first=True)
embark.head(5)

pcl=embark=pd.get_dummies(data['Pclass'],drop_first=True)
pcl.head(5)

data=pd.concat([data,sex,embark,pcl],axis=1)

data.head(5)

data.drop(["Sex","Name","Embarked","PassengerId","Ticket"], axis=1,inplace=True)

data.head(5)

data.drop(["Ticket"],axis=1,inplace=True)

data.drop(["PassengerId"],axis=1,inplace=True)

data.head(5)

X=data.drop(['Survived'],axis=1)
Y=data['Survived']

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.33, random_state=42)

from sklearn.linear_model import LogisticRegression
logreg = LogisticRegression(max_iter=500)
logreg.fit(X_train,Y_train.ravel())

Y_pred = logreg.predict(X_test)
print('Accuracy of logistic regression classifier on test set: {:.2f}'.format(logreg.score(X_test, Y_test)))

#@title Default title text
from sklearn.metrics import confusion_matrix
confusion_matrix = confusion_matrix(Y_test, Y_pred)
print(confusion_matrix)

#different perfomance matric 
from sklearn.metrics import classification_report
print(classification_report(Y_test, Y_pred))

#ROC
from sklearn.metrics import roc_auc_score
from sklearn.metrics import roc_curve

logit_roc_auc = roc_auc_score(Y_test, logreg.predict(X_test))
fpr, tpr, thresholds = roc_curve(Y_test, logreg.predict_proba(X_test)[:,1])
plt.figure()
plt.plot(fpr, tpr, label='Logistic Regression (area = %0.2f)' % logit_roc_auc)
plt.plot([0, 1], [0, 1],'r-')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.0])
plt.xlabel('False Positive Rate')